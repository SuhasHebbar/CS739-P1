// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: afs/afs.proto

package afs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AfsServiceClient is the client API for AfsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AfsServiceClient interface {
	Fetch(ctx context.Context, in *Path, opts ...grpc.CallOption) (*FileData, error)
	Store(ctx context.Context, in *FileData, opts ...grpc.CallOption) (*IOResult, error)
	Remove(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error)
	Create(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error)
	Rename(ctx context.Context, in *RenameArgs, opts ...grpc.CallOption) (*IOResult, error)
	Makedir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error)
	Removedir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error)
	TestAuth(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error)
	GetFileStat(ctx context.Context, in *Path, opts ...grpc.CallOption) (*StatData, error)
}

type afsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAfsServiceClient(cc grpc.ClientConnInterface) AfsServiceClient {
	return &afsServiceClient{cc}
}

func (c *afsServiceClient) Fetch(ctx context.Context, in *Path, opts ...grpc.CallOption) (*FileData, error) {
	out := new(FileData)
	err := c.cc.Invoke(ctx, "/afs.AfsService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afsServiceClient) Store(ctx context.Context, in *FileData, opts ...grpc.CallOption) (*IOResult, error) {
	out := new(IOResult)
	err := c.cc.Invoke(ctx, "/afs.AfsService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afsServiceClient) Remove(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error) {
	out := new(IOResult)
	err := c.cc.Invoke(ctx, "/afs.AfsService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afsServiceClient) Create(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error) {
	out := new(IOResult)
	err := c.cc.Invoke(ctx, "/afs.AfsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afsServiceClient) Rename(ctx context.Context, in *RenameArgs, opts ...grpc.CallOption) (*IOResult, error) {
	out := new(IOResult)
	err := c.cc.Invoke(ctx, "/afs.AfsService/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afsServiceClient) Makedir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error) {
	out := new(IOResult)
	err := c.cc.Invoke(ctx, "/afs.AfsService/Makedir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afsServiceClient) Removedir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error) {
	out := new(IOResult)
	err := c.cc.Invoke(ctx, "/afs.AfsService/Removedir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afsServiceClient) TestAuth(ctx context.Context, in *Path, opts ...grpc.CallOption) (*IOResult, error) {
	out := new(IOResult)
	err := c.cc.Invoke(ctx, "/afs.AfsService/TestAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afsServiceClient) GetFileStat(ctx context.Context, in *Path, opts ...grpc.CallOption) (*StatData, error) {
	out := new(StatData)
	err := c.cc.Invoke(ctx, "/afs.AfsService/GetFileStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AfsServiceServer is the server API for AfsService service.
// All implementations must embed UnimplementedAfsServiceServer
// for forward compatibility
type AfsServiceServer interface {
	Fetch(context.Context, *Path) (*FileData, error)
	Store(context.Context, *FileData) (*IOResult, error)
	Remove(context.Context, *Path) (*IOResult, error)
	Create(context.Context, *Path) (*IOResult, error)
	Rename(context.Context, *RenameArgs) (*IOResult, error)
	Makedir(context.Context, *Path) (*IOResult, error)
	Removedir(context.Context, *Path) (*IOResult, error)
	TestAuth(context.Context, *Path) (*IOResult, error)
	GetFileStat(context.Context, *Path) (*StatData, error)
	mustEmbedUnimplementedAfsServiceServer()
}

// UnimplementedAfsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAfsServiceServer struct {
}

func (UnimplementedAfsServiceServer) Fetch(context.Context, *Path) (*FileData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedAfsServiceServer) Store(context.Context, *FileData) (*IOResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedAfsServiceServer) Remove(context.Context, *Path) (*IOResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedAfsServiceServer) Create(context.Context, *Path) (*IOResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAfsServiceServer) Rename(context.Context, *RenameArgs) (*IOResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedAfsServiceServer) Makedir(context.Context, *Path) (*IOResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Makedir not implemented")
}
func (UnimplementedAfsServiceServer) Removedir(context.Context, *Path) (*IOResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Removedir not implemented")
}
func (UnimplementedAfsServiceServer) TestAuth(context.Context, *Path) (*IOResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAuth not implemented")
}
func (UnimplementedAfsServiceServer) GetFileStat(context.Context, *Path) (*StatData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileStat not implemented")
}
func (UnimplementedAfsServiceServer) mustEmbedUnimplementedAfsServiceServer() {}

// UnsafeAfsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AfsServiceServer will
// result in compilation errors.
type UnsafeAfsServiceServer interface {
	mustEmbedUnimplementedAfsServiceServer()
}

func RegisterAfsServiceServer(s grpc.ServiceRegistrar, srv AfsServiceServer) {
	s.RegisterService(&AfsService_ServiceDesc, srv)
}

func _AfsService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).Fetch(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfsService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).Store(ctx, req.(*FileData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfsService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).Remove(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).Create(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfsService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).Rename(ctx, req.(*RenameArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfsService_Makedir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).Makedir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/Makedir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).Makedir(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfsService_Removedir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).Removedir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/Removedir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).Removedir(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfsService_TestAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).TestAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/TestAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).TestAuth(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfsService_GetFileStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfsServiceServer).GetFileStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/afs.AfsService/GetFileStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfsServiceServer).GetFileStat(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

// AfsService_ServiceDesc is the grpc.ServiceDesc for AfsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AfsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "afs.AfsService",
	HandlerType: (*AfsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _AfsService_Fetch_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _AfsService_Store_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _AfsService_Remove_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AfsService_Create_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _AfsService_Rename_Handler,
		},
		{
			MethodName: "Makedir",
			Handler:    _AfsService_Makedir_Handler,
		},
		{
			MethodName: "Removedir",
			Handler:    _AfsService_Removedir_Handler,
		},
		{
			MethodName: "TestAuth",
			Handler:    _AfsService_TestAuth_Handler,
		},
		{
			MethodName: "GetFileStat",
			Handler:    _AfsService_GetFileStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "afs/afs.proto",
}
