// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: afs.proto
#ifndef GRPC_afs_2eproto__INCLUDED
#define GRPC_afs_2eproto__INCLUDED

#include "afs.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace afs {

class AfsService final {
 public:
  static constexpr char const* service_full_name() {
    return "afs.AfsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Fetch(::grpc::ClientContext* context, const ::afs::Path& request, ::afs::FileData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::FileData>> AsyncFetch(::grpc::ClientContext* context, const ::afs::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::FileData>>(AsyncFetchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::FileData>> PrepareAsyncFetch(::grpc::ClientContext* context, const ::afs::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::FileData>>(PrepareAsyncFetchRaw(context, request, cq));
    }
    virtual ::grpc::Status Store(::grpc::ClientContext* context, const ::afs::FileData& request, ::afs::IOResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::IOResult>> AsyncStore(::grpc::ClientContext* context, const ::afs::FileData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::IOResult>>(AsyncStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::IOResult>> PrepareAsyncStore(::grpc::ClientContext* context, const ::afs::FileData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afs::IOResult>>(PrepareAsyncStoreRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Fetch(::grpc::ClientContext* context, const ::afs::Path* request, ::afs::FileData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Fetch(::grpc::ClientContext* context, const ::afs::Path* request, ::afs::FileData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Store(::grpc::ClientContext* context, const ::afs::FileData* request, ::afs::IOResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Store(::grpc::ClientContext* context, const ::afs::FileData* request, ::afs::IOResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afs::FileData>* AsyncFetchRaw(::grpc::ClientContext* context, const ::afs::Path& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afs::FileData>* PrepareAsyncFetchRaw(::grpc::ClientContext* context, const ::afs::Path& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afs::IOResult>* AsyncStoreRaw(::grpc::ClientContext* context, const ::afs::FileData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afs::IOResult>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::afs::FileData& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Fetch(::grpc::ClientContext* context, const ::afs::Path& request, ::afs::FileData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::FileData>> AsyncFetch(::grpc::ClientContext* context, const ::afs::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::FileData>>(AsyncFetchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::FileData>> PrepareAsyncFetch(::grpc::ClientContext* context, const ::afs::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::FileData>>(PrepareAsyncFetchRaw(context, request, cq));
    }
    ::grpc::Status Store(::grpc::ClientContext* context, const ::afs::FileData& request, ::afs::IOResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::IOResult>> AsyncStore(::grpc::ClientContext* context, const ::afs::FileData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::IOResult>>(AsyncStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::IOResult>> PrepareAsyncStore(::grpc::ClientContext* context, const ::afs::FileData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afs::IOResult>>(PrepareAsyncStoreRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Fetch(::grpc::ClientContext* context, const ::afs::Path* request, ::afs::FileData* response, std::function<void(::grpc::Status)>) override;
      void Fetch(::grpc::ClientContext* context, const ::afs::Path* request, ::afs::FileData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Store(::grpc::ClientContext* context, const ::afs::FileData* request, ::afs::IOResult* response, std::function<void(::grpc::Status)>) override;
      void Store(::grpc::ClientContext* context, const ::afs::FileData* request, ::afs::IOResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::afs::FileData>* AsyncFetchRaw(::grpc::ClientContext* context, const ::afs::Path& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afs::FileData>* PrepareAsyncFetchRaw(::grpc::ClientContext* context, const ::afs::Path& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afs::IOResult>* AsyncStoreRaw(::grpc::ClientContext* context, const ::afs::FileData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afs::IOResult>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::afs::FileData& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Fetch_;
    const ::grpc::internal::RpcMethod rpcmethod_Store_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Fetch(::grpc::ServerContext* context, const ::afs::Path* request, ::afs::FileData* response);
    virtual ::grpc::Status Store(::grpc::ServerContext* context, const ::afs::FileData* request, ::afs::IOResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Fetch() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* /*context*/, const ::afs::Path* /*request*/, ::afs::FileData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetch(::grpc::ServerContext* context, ::afs::Path* request, ::grpc::ServerAsyncResponseWriter< ::afs::FileData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Store() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::afs::FileData* /*request*/, ::afs::IOResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::afs::FileData* request, ::grpc::ServerAsyncResponseWriter< ::afs::IOResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Fetch<WithAsyncMethod_Store<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Fetch() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::afs::Path, ::afs::FileData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afs::Path* request, ::afs::FileData* response) { return this->Fetch(context, request, response); }));}
    void SetMessageAllocatorFor_Fetch(
        ::grpc::MessageAllocator< ::afs::Path, ::afs::FileData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afs::Path, ::afs::FileData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* /*context*/, const ::afs::Path* /*request*/, ::afs::FileData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Fetch(
      ::grpc::CallbackServerContext* /*context*/, const ::afs::Path* /*request*/, ::afs::FileData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Store() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::afs::FileData, ::afs::IOResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afs::FileData* request, ::afs::IOResult* response) { return this->Store(context, request, response); }));}
    void SetMessageAllocatorFor_Store(
        ::grpc::MessageAllocator< ::afs::FileData, ::afs::IOResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afs::FileData, ::afs::IOResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::afs::FileData* /*request*/, ::afs::IOResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Store(
      ::grpc::CallbackServerContext* /*context*/, const ::afs::FileData* /*request*/, ::afs::IOResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Fetch<WithCallbackMethod_Store<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Fetch() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* /*context*/, const ::afs::Path* /*request*/, ::afs::FileData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Store() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::afs::FileData* /*request*/, ::afs::IOResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Fetch() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* /*context*/, const ::afs::Path* /*request*/, ::afs::FileData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Store() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::afs::FileData* /*request*/, ::afs::IOResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Fetch() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Fetch(context, request, response); }));
    }
    ~WithRawCallbackMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* /*context*/, const ::afs::Path* /*request*/, ::afs::FileData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Fetch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Store() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Store(context, request, response); }));
    }
    ~WithRawCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::afs::FileData* /*request*/, ::afs::IOResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Store(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Fetch() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afs::Path, ::afs::FileData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afs::Path, ::afs::FileData>* streamer) {
                       return this->StreamedFetch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Fetch(::grpc::ServerContext* /*context*/, const ::afs::Path* /*request*/, ::afs::FileData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afs::Path,::afs::FileData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Store() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afs::FileData, ::afs::IOResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afs::FileData, ::afs::IOResult>* streamer) {
                       return this->StreamedStore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::afs::FileData* /*request*/, ::afs::IOResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afs::FileData,::afs::IOResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Fetch<WithStreamedUnaryMethod_Store<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Fetch<WithStreamedUnaryMethod_Store<Service > > StreamedService;
};

}  // namespace afs


#endif  // GRPC_afs_2eproto__INCLUDED
